#!/bin/bash

# -- Functions

help () {
	echo "Usage: wp-migrate-ssh.sh -m [m|fo|do] -sh <source hostname> -su <source user> -d <domain name> [OPTIONS]...

Migrate WordPress sites using ssh/rsync/wp-cli - Created by jordantrizz (https://github.com/jordantrizz/wp-migrate-ssh

	Choose a mode -m:	
		m		migrate - run migration
		s		setup - setup remote host with SSH key for multiple runs.
		fo		file-only - only copy over files.
		do		database-only - only copy over the database.
		pmo		post-migration-only - only run any post migration steps.
		tu		temporary-url - setup a temporary url.
	
	Required Options:
		-sh		Source IP/Hostname.
		-su		Source User
		-d		Domain Name of site to be migrated

	Optional:
        	--debug		Print debug messages
        	-f		Force even though WP installation doesn't exists, ususally due to no database.
		-sd		Set source directory, defaults to public_html
		-dd		Set destination directory, defaults to public_html
		-tu		Temporary URL, not used if not defined.
		-pc		Post migration custom wp-cli commands.
		-gp		Enable GridPane NGiNX helper and configure to flush redis page cache.
"
        exit
}

preflight () {
	echo "Checking for commands"
	cmds_required=( wp sshpass ssh )
	for cmd in "${cmds_required[@]}"
	do
		if ! type "$cmd" > /dev/null 2>&1; then
			echo "You don't have $cmd..exiting".
			exit
		fi
	done
}

cleanup () {
	wp --path=$dst_dir --skip-themes --skip-plugins cache flush
}

_debug () {
	if [[ $debug = 1 ]]; then
		echo "*** Debug: $@"
	fi
}

ssh_init () {
	echo "Initializing SSH"	
	# Check if there's a public SSH key.
	echo "Checking if we have a public key"
	if [ -f "$HOME/.ssh/id_rsa.pub" ]; then
		echo "Found ssh key."
		
		# Check if the if we have know hosts.
		echo "Checking remote connection to $src_ip."
		sshcheck=$(ssh-keygen -F $remote_IP 2>&1)	
		if [ $? -eq 0 ]; then
			echo "Remote host is already in the Known Hosts file."
		else
			echo "Adding remote system $src_up to $HOME/.ssh/known_hosts"
			ssh-keyscan $src_ip >> $HOME/.ssh/known_hosts
			echo "Remote host $src_ip added to the known hosts file."
		fi

		# See if we can connect to remote host.
		ssh_connect_test
		if [ "$sshstatus" == "ok" ]; then
			echo "Remote SSH Test Successful."
		else
			echo "SSH Test Un-successful, sending ssh key."
			ssh-copy-id -i ~/.ssh/id_rsa.pub $src_user@$src_ip
			if [ $? -eq 0 ]; then
				echo "Failed to send key, falling back to password."
				ssh_password
			else
				echo "Sent ssh key successfully, testing connection."
				ssh_connect_test
				if [ "$sshstatus" == "ok" ]; then
		                        echo "Remote SSH Test Successful."
		                else
	                                echo "Failed to send key, falling back to password."
        	                        ssh_password			
        	                fi
        	        fi
		fi
	else
		echo "No public key found."
		ssh_password
	fi	
}

ssh_connect_test () {
	sshstatus=$(ssh -o BatchMode=yes -o ConnectTimeout=5 $src_user@$src_ip echo ok 2>&1)
}

ssh_password () {
        echo "Using SSH password function."
        # Let's get the SSH password. Read password interactively and save it to the environment
        read -s -p "Password to use: " SSHPASS
        export SSHPASS
        echo ""
}

generate_ssh_key () {
	echo "Running ssh-keygen function"
	echo "Generated SSH key, please enter when asked for a password"
	ssh-keygen
}	

migrate_files () {
	echo "Starting migrate_files function"
	echo "Migrating remote $src_dir to local $dst_dir"

	# Exclude these directories,
	rsync_exclude='--exclude "wp-content/cache"'	

	# Copy files. Should only show one line progress updated.
        if [ -z $SSHPASS ]; then
		 _debug  "No \$SSHPASS so doing not passing to ssh or scp"
		rsync -iavzh --progress --log-file=$src_ip-wp-migrate-ssh.log $src_user@$src_ip:$src_dir/wp-content $dst_dir $rsync_exclude
	else
		 _debug  "\$SSHPASS exists so passing to ssh or scp"
	        sshpass -p "$SSHPASS" rsync -iavzh --progress --log-file=$src_ip-wp-migrate-ssh.log $src_user@$src_ip:$src_dir/wp-content $dst_dir $rsync_exclude
	fi	     
 }

migrate_database () {
	echo "Running migrate_database function"
        # Variables
        src_db_bkup=$src_user-wp-sql.sql

        # Grab the database. Need to fix path issues.
	if [ -z $SSHPASS ]; then
		_debug	"No \$SSHPASS so not passing to ssh or scp"
                ssh -o "StrictHostKeyChecking no" $src_user@$src_ip "/usr/local/sbin/wp --path=$src_dir db export ~/$src_db_bkup"
                scp -o "StrictHostKeyChecking no" $src_user@$src_ip:~/$src_user-wp-sql.sql .
	else 
		_debug  "\$SSHPASS exists so passing to ssh or scp"
		echo "Dumping database on $src_user@$src_ip"
        	dump_db=$(sshpass -p "$SSHPASS" ssh -o "StrictHostKeyChecking no" $src_user@$src_ip "/usr/local/sbin/wp --path=$src_dir db export ~/$src_db_bkup")
        	if [ $? -eq 0 ]; then echo "dumpb_db successful"; else echo "dump_db failed $dump_db"; exit; fi
	        grab_db=$(sshpass -p "$SSHPASS" scp -o "StrictHostKeyChecking no" $src_user@$src_ip:~/$src_user-wp-sql.sql .)
	        _debug "$grab_db"
	fi
        # Import the database.
	_debug "Resetting database"
        wp --path=$dst_dir db reset
	_debug "Importing database."
        wp --path=$dst_dir db import $src_db_bkup
        # Disabled cause this can go wrong.
	#rm $src_db_bkup
}

post_migration () {
	_debug "Running post_migration function"
	# Flush Cache
	wp --path=$dst_dir cache flush
	wp --path=$dst_dir plugin install --activate wp-serverinfo
	wp --path=$dst_dir plugin activate nginx-helper
	wp --path=$dst_dir --format=json option set rt_wp_nginx_helper_options '{"enable_purge":"1","cache_method":"enable_redis","purge_method":"get_request","enable_map":null,"enable_log":null,"log_level":"INFO","log_filesize":"5","enable_stamp":null,"purge_homepage_on_edit":"1","purge_homepage_on_del":"1","purge_archive_on_edit":"1","purge_archive_on_del":"1","purge_archive_on_new_comment":null,"purge_archive_on_deleted_comment":null,"purge_page_on_mod":"1","purge_page_on_new_comment":"1","purge_page_on_deleted_comment":"1","redis_hostname":"127.0.0.1","redis_port":"6379","redis_prefix":"nginx-cache:","purge_url":"","redis_enabled_by_constant":0}'
}

temporary_url () {
	_debug "Running temporary_url function."
	# Setup temporary url.
        wp --path=$dst_dir plugin install multiple-domain --activate
        wp --path=$dst_dir --format=json option set multiple-domain-domains '{"'$domain'":{"base":null,"lang":null,"protocol":"auto"},"'$temp_url'":{"base":null,"lang":null,"protocol":"auto"}}'
	wp --path=$dst_dir --skip-themes --skip-plugins search-replace $domain $temp_url
	wp --path=$dst_dir cache flush
	wp --path=$dst_dir option get multiple-domain-domains
	curl --head $temp_url
}

_debug "Debug is enabled"

# -- Parse Command Line Arguments https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    --debug)
    debug="1"
    shift # past argument
    ;;
    -m)
    mode="$2"
    shift # past argument
    ;;
    -sh)
    src_ip="$2"
    shift # past argument
    shift # past value
    ;;
    -su)
    src_user="$2"
    shift # past argument
    shift # past value
    ;;
    -d)
    domain="$2"
    shift # past argument
    shift # past value
    ;;
    -f)
    force="1"
    shift # past argument
    ;;
    -sd)
    src_dir="$2"
    shift # past argument
    shift # past value
    ;;
    -tu)
    temp_url="$2"
    shift # past argument
    shift # past value
    ;;
    -dd)
    dst_dir="$2"
    shift # past argument
    shift # past value
    ;;
    -pc)
    post-commands="$2"
    shift # past argument
    shift # past value
    ;;
    -gp)
    gridpane="$2"
    shift # past argument
    shift # past value
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if [[ -n $1 ]]; then
    unknown_options=$1
fi

preflight
_debug "Debug mode enabled"

if [[ $mode = 'm' ]]; then
	if [ -z "$src_ip" ]; then echo "Missing required option -sh"; exit; fi
	if [ -z "$src_user" ]; then echo "Missing required option -su"; exit ; fi
	if [ -z "$domain" ]; then echo "Missing required option -d"; exit; fi
	if [ -z "$src_dir" ]; then src_dir="public_html"; fi
	if [ -z "$dst_dir" ]; then dst_dir="public_html"; fi
	echo "Mirgate method"
	
	# Checking if a WordPress install exists.
	echo "Checking if a WordPress install exists in $dst_dir"

	if [[ !$force = '1' ]]; then
		if ! $(wp --path=$dst_dir core is-installed); then
			echo "No WordPress install in $dst_dir"
        		exit
        	fi
        fi
	# Start migration process.
	echo "Start migration proces"
        ssh_init
        migrate_database
        migrate_files
        post_migration

	# Temporary URL
	if [ ! -z "$temp_url" ]; then
		echo "Setting up temporary URL"
		post_temp_url
	fi
	
	# Specify wp-cli commands after migration is completed
	if [ ! -z "$pc"]; then
		echo "Not implemented yet"
	fi
	
	# Install plugins - Future Use
	#if [ -z "$plugins" ]; then
        #	wp --path=$dst_dir plugin install --activate $plugins
	#fi

elif [[ $mode = 's' ]]; then
        if [ -z "$src_ip" ]; then echo "Missing required option -sh"; exit; fi
        if [ -z "$src_user" ]; then echo "Missing required option -su"; exit ; fi
        echo "Setting up host method."
        if [[ -f "$HOME/.ssh/id_rsa.pub" ]]; then
	        echo "Copying SSH key."
	        ssh-copy-id $src_user@$src_ip
	else
		echo "No SSH key found, generating one."
		generate_ssh_key
                echo "Copying SSH key."
                ssh-copy-id $src_user@$src_ip
	fi	        
elif [[ $mode = 'fo' ]]; then
        if [ -z "$src_ip" ]; then echo "Missing required option -sh"; exit; fi
        if [ -z "$src_user" ]; then echo "Missing required option -su"; exit ; fi
        if [ -z "$src_dir" ]; then src_dir="public_html"; fi
        if [ -z "$dst_dir" ]; then src_dir="public_html"; fi
        echo 'Files only method.'
	ssh_init
       	migrate_files
elif [[ $mode = 'do' ]]; then
        if [ -z "$src_ip" ]; then echo "Missing required option -sh"; exit; fi
        if [ -z "$src_user" ]; then echo "Missing required option -su"; exit ; fi
	echo 'Database only method.'
	migrate_database
elif [[ $mode = 'pmo' ]]; then
        if [ -z $dst_dir ]; then echo "You need to provide a destination directory using -dd"; exit; fi
        post_migration
elif [[ $mode = 'tu' ]]; then
        if [ -z $temp_url ]; then echo "You need to provide a temporary url using -tu"; exit; fi
	if [ -z $dst_dir ]; then echo "You need to provide a destination directory using -dd"; exit; fi
	if [ -z $domain ]; then echo "You need to provide a destination directory using -d"; exit; fi
	temporary_url
else
	help
fi

# Divi will fail to load if you don't update this.
# Also need to investigate recently_edited option
#if [ -z "$divifix" ]; then
#	wp --path=$dst_dir option delete _transient_et_core_path 
#fi
# clear the exported variable containing the password
unset SSHPASS